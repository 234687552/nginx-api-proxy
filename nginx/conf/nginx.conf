env PROJECT_ROOT;#声明环境变量
worker_processes auto;
error_log logs/error.log;
pid logs/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log logs/access.log main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Lua配置
    lua_shared_dict config_cache 10m;
    lua_shared_dict rate_limit 10m;
    lua_shared_dict token_cache 10m;
    
    
    # 初始化配置
    init_by_lua_block {
        -- lua 模块路径
        local project_root = os.getenv("PROJECT_ROOT")
        package.path = project_root .. "/lua/?.lua;" .. package.path
        
        -- 加载配置
        local config_loader = require "config_loader"
        config_loader.load_config()
    }


    # DNS解析器配置
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # API代理服务器
    server {
        listen 19981;
        server_name localhost;
        
        # 健康检查接口
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }
        
        # 包含各服务的代理配置
        include claude-proxy.conf;
        # 未来可以添加：
        # include openai-proxy.conf;
        # include gemini-proxy.conf;

        # 错误处理
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
}